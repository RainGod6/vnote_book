vnote_backup_file_826537664 /Users/user/study/note/测试技能图谱/编程技术/python/第七章(面向对象)/16-设计模式.md
# 16-设计模式


## 工厂模式实现

设计模式是面向对象语言特有的内容，是我们在面临某一类问题时候固定的做法，设计模式有很多种，比较流行的是：GOF(Group Of Four)23种设计模式。

我们先学习2个最常用的模式：工厂模式和单例模式。

工厂模式实现了创建者和调用者的分离，使用专门的工厂类将选择实现类、创建对象进行统一的管理和控制。

```
# 工厂模式


class CarFactory:

    def creat_car(self, brand):
        if brand == "奔驰":
            return Benz()
        elif brand == "宝马":
            return BMW()
        elif brand == "比亚迪":
            return BYD()
        else:
            return "未知品牌，无法创建"


class Benz:
    pass


class BMW:
    pass


class BYD:
    pass


factory = CarFactory()
c1 = factory.creat_car("奔驰")
c2 = factory.creat_car("宝马")
c3 = factory.creat_car("比亚迪")

print(c1)
print(c2)

```

执行结果如下：
<__main__.Benz object at 0x102b13e90>
<__main__.BMW object at 0x102b13ed0>


## 单例模式实现

单例模式(Singleton Pattern)的核心作用是确保一个类只有一个实例，并且提供一个访问该实例的全局访问点。

单例模式只生成一个实例对象，减少了对系统资源对开销。当一个对象的产生需要比较多的资源，如读取配置文件，产生其它依赖对象时，可以产生一个单例对象，然后永久驻留在内存中，从而极大的降级开销。

单例模式有很多种实现方式，下面推荐使用重写__new__()的方法。


案例：单例模式

```
# 单例模式


class MySingleton:
    __obj = None
    __init_flag = True

    def __new__(cls, *args, **kwargs):
        if cls.__obj == None:
            cls.__obj = object.__new__(cls)
        return cls.__obj

    def __init__(self, name):
        if MySingleton.__init_flag:
            print("init....")
            self.name = name
            MySingleton.__init_flag = False


a = MySingleton("aa")
print(a)
b = MySingleton("bb")
print(b)

```

执行结果如下：
init....
<__main__.MySingleton object at 0x102b13790>
<__main__.MySingleton object at 0x102b13790>


设计模式称之为模式，就是一些固定的套路。我们很容易用到其它场景上，比如前面学习的工厂模式，我们需要将工厂类定义成单例，只需要简单的套用即可实现：

```
# 测试工厂模式下将工厂实现单例模式

# 工厂模式


class CarFactory:

    __obj = None
    __init_flag = True

    def __new__(cls, *args, **kwargs):
        if cls.__obj == None:
            cls.__obj = object.__new__(cls)
        return cls.__obj

    def __init__(self):
        if CarFactory.__init_flag:
            print("init CarFactory....")
            CarFactory.__init_flag = False

    def creat_car(self, brand):
        if brand == "奔驰":
            return Benz()
        elif brand == "宝马":
            return BMW()
        elif brand == "比亚迪":
            return BYD()
        else:
            return "未知品牌，无法创建"


class Benz:
    pass


class BMW:
    pass


class BYD:
    pass


factory = CarFactory()
c1 = factory.creat_car("奔驰")
c2 = factory.creat_car("宝马")
c3 = factory.creat_car("比亚迪")

print(c1)
print(c2)
print(c3)

factory2 = CarFactory()
print(factory)
print(factory2)
```

执行结果如下：
```
init CarFactory....
<__main__.Benz object at 0x103313f90>
<__main__.BMW object at 0x103313fd0>
<__main__.BYD object at 0x103330050>
<__main__.CarFactory object at 0x103313f50>
<__main__.CarFactory object at 0x103313f50>
```